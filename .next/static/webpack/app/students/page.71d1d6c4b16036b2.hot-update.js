"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/students/page",{

/***/ "(app-pages-browser)/./src/utils/progressCalculations.ts":
/*!*******************************************!*\
  !*** ./src/utils/progressCalculations.ts ***!
  \*******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateHafalanProgress: function() { return /* binding */ calculateHafalanProgress; },\n/* harmony export */   calculateTilawahProgress: function() { return /* binding */ calculateTilawahProgress; }\n/* harmony export */ });\n/* harmony import */ var _quranData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./quranData */ \"(app-pages-browser)/./src/utils/quranData.ts\");\n\n// Constants for total verses and pages\nconst PAGES_PER_TILAWATI_LEVEL = 44; // Each Tilawati level has 44 pages\nconst calculateHafalanProgress = (entries)=>{\n    if (!entries || entries.length === 0) {\n        return {\n            percentage: 0,\n            last_surah: null,\n            total_verses: 0\n        };\n    }\n    // Sort entries by date to get the most recent\n    const sortedEntries = [\n        ...entries\n    ].sort((a, b)=>new Date(b.date).getTime() - new Date(a.date).getTime());\n    // Get the current surah from the latest entry\n    const currentSurah = sortedEntries[0].surah_or_jilid;\n    const surahData = currentSurah ? (0,_quranData__WEBPACK_IMPORTED_MODULE_0__.getSurahByName)(currentSurah) : null;\n    if (!surahData) {\n        return {\n            percentage: 0,\n            last_surah: currentSurah,\n            total_verses: 0\n        };\n    }\n    // Find the latest surah change date\n    let latestSurahStartDate = new Date(sortedEntries[0].date);\n    for(let i = 1; i < sortedEntries.length; i++){\n        if (sortedEntries[i].surah_or_jilid !== currentSurah) {\n            latestSurahStartDate = new Date(sortedEntries[0].date);\n            break;\n        }\n    }\n    // Get all entries for the current surah after the latest surah change\n    const currentSurahEntries = entries.filter((entry)=>entry.surah_or_jilid === currentSurah && new Date(entry.date) >= latestSurahStartDate);\n    // Track which verses have been memorized\n    const memorizedVerses = new Set();\n    // Process all entries for the current surah\n    for (const entry of currentSurahEntries){\n        if (entry.ayat_or_page) {\n            const ayatRange = entry.ayat_or_page;\n            if (ayatRange.includes(\"-\")) {\n                // Handle verse range (e.g., \"1-5\")\n                const [start, end] = ayatRange.split(\"-\").map((num)=>parseInt(num.trim()));\n                if (!isNaN(start) && !isNaN(end) && end >= start) {\n                    // Add all verses in the range to the set\n                    for(let verse = start; verse <= end; verse++){\n                        if (verse <= surahData.verses) {\n                            memorizedVerses.add(verse);\n                        }\n                    }\n                }\n            } else {\n                // Handle single verse\n                const verse = parseInt(ayatRange);\n                if (!isNaN(verse) && verse <= surahData.verses) {\n                    memorizedVerses.add(verse);\n                }\n            }\n        }\n    }\n    // Calculate percentage based on unique verses memorized out of total verses in the surah\n    const uniqueVersesMemorized = memorizedVerses.size;\n    const percentage = Math.min(Math.round(uniqueVersesMemorized / surahData.verses * 100), 100);\n    return {\n        percentage,\n        last_surah: currentSurah,\n        total_verses: uniqueVersesMemorized,\n        start_date: latestSurahStartDate.toISOString().split(\"T\")[0] // Add start date for reference\n    };\n};\nconst calculateTilawahProgress = (entries)=>{\n    if (!entries || entries.length === 0) {\n        return {\n            percentage: 0,\n            jilid: null,\n            total_pages: 0\n        };\n    }\n    // Sort entries by date to get the most recent\n    const sortedEntries = [\n        ...entries\n    ].sort((a, b)=>new Date(b.date).getTime() - new Date(a.date).getTime());\n    // Get the most recent entry to determine current page and jilid\n    const latestEntry = sortedEntries[0];\n    let currentPage = 0;\n    let currentJilid = null;\n    if (latestEntry) {\n        currentJilid = latestEntry.surah_or_jilid;\n        // Parse the page number from the latest entry\n        if (latestEntry.ayat_or_page) {\n            const pageRange = latestEntry.ayat_or_page;\n            if (pageRange && pageRange.includes(\"-\")) {\n                // If it's a range, take the higher number\n                const [, end] = pageRange.split(\"-\").map((num)=>parseInt(num.trim()));\n                if (!isNaN(end)) {\n                    currentPage = end;\n                }\n            } else if (pageRange) {\n                // If it's a single number\n                const pageNum = parseInt(pageRange.trim());\n                if (!isNaN(pageNum)) {\n                    currentPage = pageNum;\n                }\n            }\n        }\n    }\n    // Calculate percentage based on current page out of 44 pages\n    const percentage = Math.min(Math.round(currentPage / PAGES_PER_TILAWATI_LEVEL * 100), 100);\n    return {\n        percentage,\n        jilid: currentJilid,\n        total_pages: currentPage\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/progressCalculations.ts\n"));

/***/ })

});